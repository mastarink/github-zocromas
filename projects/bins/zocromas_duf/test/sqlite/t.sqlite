SELECT pt.rowid AS dirid , pt.dir_name AS dname , tf.numfiles AS nfiles, td.numdirs AS ndirs,  (WITH RECURSIVE cte_paths(rowid,parentid) AS  (  SELECT dpt.rowid,dpt.parentid  FROM main.paths  AS dpt  WHERE parentid=pt.rowid UNION  SELECT ptu.rowid,ptu.parentid  FROM cte_paths  JOIN main.paths AS ptu ON( ptu.parentid=cte_paths.rowid )  )  SELECT COUNT(*)      FROM cte_paths  AS ptenud    LEFT JOIN main.paths AS dpt ON (ptenud.rowid=dpt.rowid))  AS rndirs, (WITH RECURSIVE cte_paths(rowid,parentid) AS  (  SELECT fpt.rowid,fpt.parentid  FROM main.paths  AS fpt   WHERE fpt.parentid=pt.rowid OR fpt.rowid=pt.rowid UNION  SELECT ptu.rowid,ptu.parentid  FROM cte_paths  JOIN main.paths AS ptu ON( ptu.parentid=cte_paths.rowid )  )  SELECT COUNT(*)   FROM cte_paths  AS ptenuf  JOIN main.filenames AS fn ON (ptenuf.rowid=fn.Pathid) )  AS rnfiles   FROM main.paths AS pt  LEFT JOIN ( SELECT parents.rowid AS Pathid, COUNT( * ) AS numdirs    FROM main.paths AS pts        LEFT JOIN main.paths AS ptsp ON( pts.parentid = ptsp.rowid )             JOIN main.paths AS parents ON( parents.rowid = ptsp.parentid )    GROUP BY parents.rowid) AS td  ON (td.Pathid=pt.rowid)  LEFT JOIN ( SELECT fn.Pathid AS Pathid, COUNT(*) AS numfiles, min( size ) AS minsize, max( size ) AS maxsize    FROM main.filenames AS fn        LEFT JOIN main.filedatas AS fd ON( fn.dataid = fd.rowid )    GROUP BY fn.Pathid ) AS tf ON (tf.Pathid=pt.rowid );

/*
vi: ft=sql

:!cat % | sqlite3  /home/mastar/.mas/lib/duf_db/test_tree/test_tree.db

*/

